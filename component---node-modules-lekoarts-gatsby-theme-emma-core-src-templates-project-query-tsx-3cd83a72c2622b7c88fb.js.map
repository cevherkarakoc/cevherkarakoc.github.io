{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-emma/components/project-info.js","webpack:///./node_modules/@lekoarts/gatsby-theme-emma/src/components/project.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-emma-core/src/templates/project-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-emma/src/@lekoarts/gatsby-theme-emma-core/components/project.tsx"],"names":["ProjectInfo","tags","project","service","split","sx","mt","mb","flexWrap","map","tag","key","variant","mr","py","px","Project","data","titleProps","useSpring","config","slow","from","opacity","transform","to","infoProps","delay","contentProps","title","description","excerpt","pathname","slug","image","cover","childImageSharp","resize","src","name","value","client","date","fluid","color","position","bottom","left","right","maxWidth","margin","padding","zIndex","flexDirection","div","style","as","body","ProjectComponent","query"],"mappings":"8TAUeA,EAPK,SAAC,GAAiB,IAC9BC,EAD6B,EAAdC,QACAC,QAAQC,MAAM,KACnC,OAAO,YAAE,IAAF,CAAOC,GAAI,CAAEC,GAAI,EAAGC,GAAI,CAAC,EAAG,GAAIC,SAAS,SAC7CP,EAAKQ,KAAI,SAAAC,GAAG,OAAI,YAAC,IAAD,CAAOC,IAAKD,EAAKE,QAAQ,UAAUC,GAAI,EAAGN,GAAI,EAAGO,GAAI,EAAGC,GAAI,GAAIL,QC2EtEM,EAvDC,SAAC,GAAwC,IAA9Bd,EAA8B,EAAtCe,KAAQf,QACnBgB,EAAaC,YAAU,CAC3BC,OAAQA,IAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAEzBE,EAAYP,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAC9FK,EAAeT,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAML,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAExG,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEM,MAAO3B,EAAQ2B,MACfC,YAAa5B,EAAQ6B,QACrBC,SAAU9B,EAAQ+B,KAClBC,MAAOhC,EAAQiC,MAAMC,gBAAgBC,OAAQC,KAE7C,oBAAMC,KAAK,iBAAiBC,MAAM,WAClC,oBAAMD,KAAK,iBAAiBC,MAAM,SAClC,oBAAMD,KAAK,gBAAgBC,MAAOtC,EAAQuC,SAC1C,oBAAMF,KAAK,gBAAgBC,MAAOtC,EAAQwC,QAE5C,YAAC,IAAD,CAAMR,MAAOhC,EAAQiC,MAAMC,gBAAgBO,MAAOC,MAAO1C,EAAQ0C,OAC/D,YAAC,IAAD,CACEvC,GAAI,CACFwC,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,MACVC,OAAQ,SACRC,QAAS,EACTC,OAAQ,EACRC,cAAe,WAGjB,YAAC,IAASC,IAAV,CAAcC,MAAOrC,GACnB,YAAC,IAAD,CAASsC,GAAG,KAAK5C,QAAQ,aACtBV,EAAQ2B,QAGb,YAAC,IAASyB,IAAV,CAAcC,MAAO7B,GACnB,YAAC,EAAD,CAAaxB,QAASA,OAI5B,YAAC,IAAD,KACE,YAAC,IAASoD,IAAV,CAAcC,MAAO3B,GACnB,YAAC,cAAD,KAAc1B,EAAQuD,U,urBCvEjBC,UCOA,YAA0C,IAAfzC,EAAe,EAAfA,KAChCf,EAAYe,EAAZf,QAER,OAAO,YAAC,EAAD,CAASe,KAAI,OAAOA,GAAP,IAAaf,eDVpBwD,IAEFC,EAAQ","file":"component---node-modules-lekoarts-gatsby-theme-emma-core-src-templates-project-query-tsx-3cd83a72c2622b7c88fb.js","sourcesContent":["import React from \"react\"\nimport { Flex, Badge } from \"theme-ui\"\n\nconst ProjectInfo = ({ project }) => {\n  const tags = project.service.split(\"|\");\n  return < Flex sx={{ mt: 2, mb: [1, 2], flexWrap: `wrap` }}>\n    {tags.map(tag => <Badge key={tag} variant='outline' mr={2} mb={2} py={1} px={2}>{tag}</Badge>)}\n  </Flex >\n}\n\nexport default ProjectInfo","/** @jsx jsx */\nimport { animated, useSpring, config } from \"react-spring\"\nimport { Container, jsx, Flex, Heading } from \"theme-ui\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport { ChildImageSharp } from \"../types\"\nimport Hero from \"./hero\"\nimport ProjectInfo from \"./project-info\"\n\ntype ProjectProps = {\n  data: {\n    project: {\n      body: string\n      excerpt: string\n      client: string\n      color: string\n      date: string\n      service: string\n      slug: string\n      title: string\n      cover: ChildImageSharp\n    }\n  }\n}\n\nconst Project = ({ data: { project } }: ProjectProps) => {\n  const titleProps = useSpring({\n    config: config.slow,\n    from: { opacity: 0, transform: `translate3d(0, -30px, 0)` },\n    to: { opacity: 1, transform: `translate3d(0, 0, 0)` },\n  })\n  const infoProps = useSpring({ config: config.slow, delay: 500, from: { opacity: 0 }, to: { opacity: 1 } })\n  const contentProps = useSpring({ config: config.slow, delay: 1000, from: { opacity: 0 }, to: { opacity: 1 } })\n\n  return (\n    <Layout>\n      <SEO\n        title={project.title}\n        description={project.excerpt}\n        pathname={project.slug}\n        image={project.cover.childImageSharp.resize!.src}\n      >\n        <meta name=\"twitter:label1\" value=\"Client\" />\n        <meta name=\"twitter:label2\" value=\"Date\" />\n        <meta name=\"twitter:data1\" value={project.client} />\n        <meta name=\"twitter:data2\" value={project.date} />\n      </SEO>\n      <Hero image={project.cover.childImageSharp.fluid} color={project.color}>\n        <Flex\n          sx={{\n            position: `absolute`,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            maxWidth: `5xl`,\n            margin: `0 auto`,\n            padding: 4,\n            zIndex: 2,\n            flexDirection: `column`,\n          }}\n        >\n          <animated.div style={titleProps}>\n            <Heading as=\"h1\" variant=\"styles.h1\">\n              {project.title}\n            </Heading>\n          </animated.div>\n          <animated.div style={infoProps}>\n            <ProjectInfo project={project} />\n          </animated.div>\n        </Flex>\n      </Hero>\n      <Container>\n        <animated.div style={contentProps}>\n          <MDXRenderer>{project.body}</MDXRenderer>\n        </animated.div>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Project\n","import { graphql } from \"gatsby\"\nimport ProjectComponent from \"../components/project\"\n\nexport default ProjectComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    project(slug: { eq: $slug }) {\n      body\n      excerpt\n      client\n      color\n      date(formatString: $formatString)\n      service\n      slug\n      title\n      cover {\n        childImageSharp {\n          fluid(maxWidth: 1920, quality: 90) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n          resize(width: 800) {\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Project from \"../../../components/project\"\n\ntype Props = {\n  data: {\n    project: any\n    [key: string]: any\n  }\n}\n\nexport default function EmmaCoreProject({ data }: Props) {\n  const { project } = data\n\n  return <Project data={{ ...data, project }} />\n}\n"],"sourceRoot":""}